#!/usr/bin/bash
#/media/atia/36F2DCDAF2DCA003/Bash_project/ 
function validate2() {
    read -p "Enter new value for ${fields[i]} (leave empty to keep current value): " new_value
    if [[ -n "$new_value" ]]; then
    datatype=$(sed -n "$((i+1))p" "$path/$dbname/.$tablename" | cut -d":" -f2)
    checkedpk=$(sed -n "$((i+1))p" "$path/$dbname/.$tablename" | cut -d":" -f3)
    if [[ "$checkedpk" == "p_k" ]]; then
        while true ; do
            matches=$(cut -d':' -f1 "$path/$dbname/$tablename" | grep -Fx "$new_value")
            if [[ -z "$new_value" ]]; then
                echo "Primary key cannot be empty."
                return;
            elif [[ -n "$matches" ]]; then
                echo "Primary key must be unique. This value already exists."
                validate2;
            else
                if [[ "$datatype" == "int" ]]; then
                    if [[ "$new_value" =~ ^[0-9]+$ ]]; then
                        fields[i]=$new_value
                        break
                    else
                        echo "Invalid input. Please enter an integer."
                        validate2;
                    fi
                elif [[ "$datatype" == "string" ]]; then
                    if [[ "$new_value" =~ ^[a-zA-Z]+$ ]]; then
                        fields[i]=$new_value
                        break
                    else
                        echo "Invalid input. Please enter a string."
                        validate2;
                    fi
                fi
            fi
        done
    else
        while true; do
            if [[ -z "$new_value" ]]; then
                echo "The value cannot be empty."
                validate2;
            elif [[ "$datatype" == "int" && "$new_value" =~ ^[0-9]+$ ]]; then
                fields[i]=$new_value
                break
            elif [[ "$datatype" == "string" && "$new_value" =~ ^[a-zA-Z]+$ ]]; then
                fields[i]=$new_value
                break
            else
                echo "Invalid input. Please enter a valid $datatype value."
                validate2;
            fi
        done
    fi
fi
}
function validate3() {
    read -p "Enter new value for ${fields[i]} (leave empty to keep current value): " new_value
    if [[ -n "$new_value" ]]; then
        fields[i]=$new_value;
    datatype=$(sed -n "$((i+1))p" "$path/$dbname/.$tablename" | cut -d":" -f2)
    checkedpk=$(sed -n "$((i+1))p" "$path/$dbname/.$tablename" | cut -d":" -f3)
    if [[ "$checkedpk" == "p_k" ]]; then
        while true ; do
            matches=$(cut -d':' -f1 "$path/$dbname/$tablename" | grep -Fx "$new_value")
            if [[ -z "$new_value" ]]; then
                echo "Primary key cannot be empty."
                return;
            elif [[ -n "$matches" ]]; then
                echo "Primary key must be unique. This value already exists."
                validate3;
            else
                if [[ "$datatype" == "int" ]]; then
                    if [[ "$new_value" =~ ^[0-9]+$ ]]; then
                        fields[i]=$new_value
                        break
                    else
                        echo "Invalid input. Please enter an integer."
                        validate3;
                    fi
                elif [[ "$datatype" == "string" ]]; then
                    if [[ "$new_value" =~ ^[a-zA-Z]+$ ]]; then
                        fields[i]=$new_value
                        break
                    else
                        echo "Invalid input. Please enter a string."
                        validate3;
                    fi
                fi
            fi
        done
    else
        while true; do
            if [[ -z "$new_value" ]]; then
                echo "The value cannot be empty."
                validate3;
            elif [[ "$datatype" == "int" && "$new_value" =~ ^[0-9]+$ ]]; then
                fields[i]=$new_value
                break
            elif [[ "$datatype" == "string" && "$new_value" =~ ^[a-zA-Z]+$ ]]; then
                fields[i]=$new_value
                break
            else
                echo "Invalid input. Please enter a valid $datatype value."
                validate3;
            fi
        done
    fi
fi
}
#------------------------------------------------------------------------------------
path=/media/atia/36F2DCDAF2DCA003/Bash_project
select command in "createDb" "connectDb" "dropDb" "listDb" "exit"
do
    case $command  in 
    "createDb")
        read -p "enter the name of the database : " dbname
        if [[ -z "$dbname" ]]
        then
        echo "Database name cannot be empty."
        elif [[ -e "$path/$dbname" ]]
        then
        echo "the database is already exist"
        else
            if [[ ! "$dbname" =~ ^[a-zA-Z0-9_]+$ ]]
            then
            echo "Invalid database name. Only alphanumeric characters and underscores are allowed."
            continue
            else
            mkdir $path/$dbname;
            echo "the database is created successfully"
            fi
        fi
        ;;
        "connectDb")
        read -p "enter the name of the database : " dbname
        if [[ -z "$dbname" ]]
        then
        echo "Database name cannot be empty."
        # continue;
        elif [[ -e "$path/$dbname" ]]
        then
        cd $path/$dbname;
        echo "you are connected to the database"
#----------------------------------------------------------------------------------------------------------
# Create Table
# - List Tables
# - Drop Table
# - Insert into Table
# - Select From Table
# - Delete From Table
# - Update Table
        select command in "createTable" "listTables" "dropTable" "insert" "select" "Delete_From_Table" "Update_Table" "exit"
        do
            case $command in
            "createTable")
                read -p "enter the name of the table : " tablename
                if [[ -z "$tablename" ]]; then
                echo "Table name cannot be empty."
                continue;
                elif [[ -e "$path/$dbname/$tablename" || -e "$path/$dbname/.$tablename" ]]
                then
                echo "the table is already exist"
                else
                    if [[ ! "$tablename" =~ ^[a-zA-Z0-9_]+$ ]]
                        then
                        echo "Invalid table name. Only alphanumeric characters and underscores are allowed."
                        continue 
                    else
                        read -p "enter the number of fields : " num_fields
                        if [[ ! "$num_fields" =~ ^[0-9]+$ ]]
                        then
                            echo "Invalid number of fields. Only numbers are allowed."
                            continue 
                        fi
                        flag=0;
                        for ((i=1;i<=$num_fields;i++))
                        do
                            row="";
                            while true ; do 
                            read -p "enter the name of field $i : " field_name
                            if [[ ! "$field_name" =~ ^[a-zA-Z0-9_]+$ ]]
                                then
                                    echo "Invalid field name. Only alphanumeric characters and underscores are allowed."
                                    if [[ -e $path/$dbname/.$tablename ]]
                                    then
                                    rm $path/$dbname/.$tablename;
                                    fi
                                    continue ;
                            else
                                row+="$field_name:"
                                break;
                            fi
                            done
                            while true ; do 
                            read -p "enter the data_type of field $i (int/string) :" data_type
                            if [[ ! "$data_type" =~ ^(int|string)$ ]]
                                then
                                    echo "Invalid data type. Only int and string are allowed."
                                    if [[ -e $path/$dbname/.$tablename ]]
                                    then
                                    rm $path/$dbname/.$tablename;
                                    fi
                                    continue ;
                            else
                                row+="$data_type"
                                break;
                            fi
                            done
                            if [[ "$flag" -eq 0 ]]
                                then 
                                read -p "are you want add primary key (y/n) : " primary_key
                                    if [[ $primary_key =~ ^([Yy][Ee][Ss]|[Yy]) ]]
                                        then
                                        row+=":p_k" ;
                                        flag=1;
                                    fi
                            fi
                            echo "$row" >> $path/$dbname/.$tablename;
                            chmod 777 $path/$dbname/.$tablename;
                        done
                        touch $path/$dbname/$tablename;
                        chmod 777 $path/$dbname/$tablename;
                        echo "the table is created successfully";
                    fi
                fi
                ;;
                "listTables")
                if [ "$(find "$path/$dbname" -mindepth 1 -maxdepth 1 -type f | wc -l)" -eq 0 ]; then
                    echo "No tables found."
                else
                    find "$path/$dbname" -mindepth 1 -maxdepth 1 -type f -not -name ".*" | cut -d'/' -f7
                fi
                ;;
                "dropTable")
                read -p "enter the name of the table : " tablename
                if [[ -z "$tablename" ]]; then
                echo "Table name cannot be empty."
                continue;
                elif [[ -e "$path/$dbname/$tablename" ]]
                then
                rm $path/$dbname/$tablename;
                rm $path/$dbname/.$tablename;
                echo "the table is deleted successfully"
                else
                echo "the table is not exist";
                fi
                ;;
                "insert")
                read -p "Enter the name of the table: " tablename
                if [[ -z "$tablename" ]]; 
                then
                    echo "Table name cannot be empty."
                elif [[ -e "$path/$dbname/$tablename" ]]; then
                colnum=$(wc -l < "$path/$dbname/.$tablename")
                row=""
                for ((i = 1; i <= colnum; i++)); do
                    line=$(sed -n "${i}p" "$path/$dbname/.$tablename")
                    fieldname=$(echo "$line" | cut -d":" -f1)
                    datatype=$(echo "$line" | cut -d":" -f2)
                    checkedpk=$(echo "$line" | cut -d":" -f3)
                    if [[ "$checkedpk" == "p_k" ]]; then
                        while true; do
                            read -p "Enter the value for $fieldname: " value
                            matches=$( cut -d':' -f1 "$path/$dbname/$tablename" | grep -F "$value" )
                            if [[ -z "$value" ]]; then
                                echo "Primary key cannot be empty."
                            elif [[ "$matches" =~ "$value" ]]; 
                             then
                                echo "Primary key must be unique. This value already exists."
                            else
                                if [[ "$datatype" == "int" ]]; then
                                    if [[ "$value" =~ ^[0-9]+$ ]]; then
                                        break
                                    else
                                        echo "Invalid input. Please enter an integer."
                                    fi
                                elif [[ "$datatype" == "string" ]]; then
                                    if [[ "$value" =~ ^[a-zA-Z]+$ ]]; then
                                        break
                                    else
                                        echo "Invalid input. Please enter a string."
                                    fi
                                fi
                            fi
                        done
                    elif [[ "$datatype" == "int" ]]; then
                        while true; do
                            read -p "Enter the value for $fieldname: " value
                            if [[ -z "$value" ]]; then
                                echo "The value cannot be empty."
                                continue
                            elif [[ "$value" =~ ^[0-9]+$ ]]; then
                                break
                            else
                                echo "Invalid input. Please enter an integer."
                                continue;
                            fi
                        done
                    elif [[ "$datatype" == "string" ]]; then
                        while true; do
                            read -p "Enter the value for $fieldname: " value
                            if [[ -z "$value" ]]; then
                                echo "The value cannot be empty."
                                continue
                            elif [[ "$value" =~ ^[a-zA-Z]+$ ]]; then
                                break
                            else
                                echo "Invalid input. Please enter a string."
                                continue;
                            fi
                        done
                    fi
                    row+="$value:"
                done
                row="${row%:}"
                echo "$row" >> "$path/$dbname/$tablename"
                echo "The row has been inserted successfully.";
            else
                echo "The table does not exist."
            fi
                ;;
                "select")
                read -p "Enter the name of the table: " tablename
                if [[ -z "$tablename" ]]; then
                echo "Table name cannot be empty."
                continue;
                elif [[ -e "$path/$dbname/$tablename" ]]; then
                    select option in "Select All" "Select Range" "Select One Row" "Exit"
                    do
                        case $option in
                            "Select All")
                                cat "$path/$dbname/$tablename"
                                ;;
                            "Select Range")
                                read -p "Enter the starting row number: " start
                                read -p "Enter the ending row number: " end
                                if [[ ! "$start" =~ ^[0-9]+$ || ! "$end" =~ ^[0-9]+$ ]]; then
                                echo "Start and end must be numbers."
                                continue;
                                elif [[ "$start" -ge 1 && "$end" -le $(wc -l < "$path/$dbname/$tablename") && "$end" != 0 ]]; then
                                    sed -n "${start},${end}p" "$path/$dbname/$tablename";
                                else
                                    echo "Invalid range"
                                    continue;
                                fi
                                ;;
                            "Select One Row")
                                read -p "Enter the row number: " rownum
                                if [[ ! "$rownum" =~ ^[0-9]+$ ]]; then
                                    echo "Row number must be a number."
                                    continue
                                elif [[ "$rownum" -ge 1 && "$rownum" -le $(wc -l < "$path/$dbname/$tablename") ]]
                                then
                                sed -n "${rownum}p" "$path/$dbname/$tablename"
                                else
                                echo "invalid number" ;
                                fi
                                ;;
                            "Exit")
                                continue 2;
                                ;;
                            *)
                                echo "Invalid selection"
                                ;;
                        esac
                    done
                else
                    echo "The table does not exist."
                    continue ;
                fi
                read -p "enter the name of the table : " tablename
                if [[ -e "$path/$dbname/$tablename" ]]
                then
                cat $path/$dbname/$tablename;
                else
                echo "the table is not exist";
                continue;
                fi
                ;;
                "Delete_From_Table")
                read -p "enter the name of the table : " tablename
                if [[ -z "$tablename" ]]; then
                echo "Table name cannot be empty."
                continue;
                elif [[ -e "$path/$dbname/$tablename" ]];
                then
                select option in "Delete All" "Delete Range" "Delete One Row" "Exit";
                do 
                    case $option in
                        "Delete All")
                        rm $path/$dbname/$tablename;
                        touch $path/$dbname/$tablename;
                        echo "the table is deleted successfully"
                        ;;
                        "Delete Range")
                        read -p "enter the starting row number : " start
                        read -p "enter the ending row number : " end
                        if [[ ! "$start" =~ ^[0-9]+$ || ! "$end" =~ ^[0-9]+$ ]]; then
                            echo "Start and end must be numbers."
                            continue;
                        fi
                        if [[ -z "$start" || -z "$end" ]]; then
                            echo "Range cannot be empty."
                            continue;
                        
                        elif [[ "$start" -ge 1 && "$end" -le $(wc -l < "$path/$dbname/$tablename") && "$end" != 0 ]]; 
                        then
                            sed -i "${start},${end}d" $path/$dbname/$tablename;
                            echo "The rows are deleted successfully."
                        else
                            echo "Invalid range."
                            continue;
                        fi
                        ;;
                        "Delete One Row")
                        read -p "enter the row number : " rownum
                        if [[ ! "$rownum" =~ ^[0-9]+$ ]]; then
                            echo "Row number must be a number."
                            continue
                        elif [[ "$rownum" -ge 1 && "$rownum" -le $(wc -l < "$path/$dbname/$tablename") ]]
                        then
                        sed -i "${rownum}d" $path/$dbname/$tablename;
                        echo "the row is deleted successfully"
                        else
                        echo "invalid number";
                        fi
                        ;;
                        "Exit")
                        break;
                        ;;
                        *)
                        echo "invalid selection";
                        ;;
                    esac
                done
                else
                    echo "the table is not exist";
                    continue;
                fi
                ;;
                "Update_Table")
                read -p "entr the name of the table : " tablename
                if [[ -z "$tablename" ]]; then
                echo "Table name cannot be empty."
                continue;
                elif [[ -e "$path/$dbname/$tablename" ]]
                then
                select option in "Update One Row" "Update Range" "Exit"
                do
                    case $option in
                        "Update One Row")
                            read -p "Enter the row number to update: " rownum
                            if [[ ! "$rownum" =~ ^[0-9]+$ ]]; then
                                echo "Row number must be a number."
                                continue
                            fi
                            if [[ ! "$rownum" -ge 1 && "$rownum" -le $(wc -l < "$path/$dbname/$tablename") ]]; 
                            then
                                echo "Invalid row number."
                                continue
                            fi
                            row=$(sed -n "${rownum}p" "$path/$dbname/$tablename")
                            if [[ -z "$row" ]]; then
                                echo "Row does not exist."
                                continue
                            fi
                            IFS=':' read -r -a fields <<< "$row"
                            for ((i = 0; i < ${#fields[@]}; i++)); do
                                validate2;
                            done
                            new_row=$(IFS=:; echo "${fields[*]}")
                            sed -i "${rownum}s/.*/$new_row/" "$path/$dbname/$tablename"
                            echo "Row updated successfully."
                            ;;
                        "Update Range")
                            read -p "Enter the starting row number: " start
                            read -p "Enter the ending row number: " end
                            if [[ ! "$start" =~ ^[0-9]+$ || ! "$end" =~ ^[0-9]+$ ]]; then
                            echo "Start and end must be numbers."
                            continue;
                            fi
                            if [[ "$start" -lt 1 || "$end" -gt $(wc -l < "$path/$dbname/$tablename") || "$start" -gt "$end" ]]; then
                                echo "Invalid range."
                                continue
                            fi
                            for ((rownum = start; rownum <= end; rownum++)); do
                                row=$(sed -n "${rownum}p" "$path/$dbname/$tablename")
                                if [[ -z "$row" ]]; then
                                    echo "Row $rownum does not exist."
                                    continue
                                fi
                                IFS=':' read -r -a fields <<< "$row"
                                for ((i = 0; i < ${#fields[@]}; i++)); do
                                    validate3;
                                done
                                new_row=$(IFS=:; echo "${fields[*]}")
                                sed -i "${rownum}s/.*/$new_row/" "$path/$dbname/$tablename"
                            done
                            echo "Rows updated successfully."
                            ;;
                        "Exit")
                            break
                            ;;
                        *)
                            echo "Invalid selection."
                            ;;
                    esac
                done
                else
                echo "the table is not exist";
                continue;
                fi
                ;;
                "exit")
                echo "exit from database $dbname";
                break;
                ;;
                *)
                echo "invalid selection";
                ;;
            esac
        done
#------------------------------------------------------------------------------------------------------
        else
        echo "the database is not exist";
        continue
        fi
        ;;
        "dropDb")
        read -p "enter the name of the database : " dbname
        if [[ -z "$dbname" ]]; then
                echo "DB name cannot be empty."
                continue;
        elif [[ -e "$path/$dbname" ]]
        then
        rm -r $path/$dbname;
        echo "the database is deleted successfully"
        else
        echo "the database is not exist";
        fi
        ;;
        "listDb")
        if [ "$(find "$path" -mindepth 1 -maxdepth 1 -type d | wc -l)" -eq 0 ]; then
            echo "No databases found."
        else
            find "$path" -mindepth 1 -maxdepth 1 -type d -not -name ".*" | cut -d'/' -f6
        fi
        ;;
        "exit")
        echo "the program is terminated";
        break;
        ;;
        *)
        echo "invalid selection";
        ;;
    esac
done

